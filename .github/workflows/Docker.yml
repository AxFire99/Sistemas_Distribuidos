name: ci

on:
  push:
    branches:
      - "Actions-Test"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.12
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: "${{ secrets.DOCKERHUB_USERNAME }}"
          password: "${{ secrets.DOCKERHUB_TOKEN }}"
      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: "${{ secrets.DOCKERHUB_USERNAME }}/clockbox:latest"
      #- name: Login to Docker Hub 1
      #  uses: docker/login-action@v2
      #  with:
      #    username: "${{ secrets.DOCKERHUB_USERNAME_1 }}"
      #    password: "${{ secrets.DOCKERHUB_TOKEN_1 }}"
      #- name: Set up Docker buildx 1
      #  uses: docker/setup-buildx-action@v2
      #- name: Build and push Docker image 1
      #  uses: docker/build-push-action@v3
      #  with:
      #    context: .
      #    file: ./Dockerfile
      #    push: true
      #    tags: "${{ secrets.DOCKERHUB_USERNAME_1 }}/clockbox:latest"
      #- name: Login to Docker Hub 2
      #  uses: docker/login-action@v2
      #  with:
      #    username: "${{ secrets.DOCKERHUB_USERNAME_2 }}"
      #    password: "${{ secrets.DOCKERHUB_TOKEN_2 }}"
      #- name: Set up Docker buildx 2
      #  uses: docker/setup-buildx-action@v2
      #- name: Build and push Docker image 2
      #  uses: docker/build-push-action@v3
      #  with:
      #    context: .
      #    file: ./Dockerfile
      #    push: true
      #    tags: "${{ secrets.DOCKERHUB_USERNAME_2 }}/clockbox:latest"

  test:
    name: Test Django Application
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.12
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Pull Docker image
        run: docker pull "oni672/clockbox:latest"
      - name: Save Docker image details
        run: docker inspect "oni672/clockbox:latest" > docker-image-details.json
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: docker-image-details.json
      - name: Run Django tests
        run: |
          python manage.py test

  #Ensures that is up to code standards and style guidelines.
  lint:
    name: Lint Python code
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.12
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Run linter
        run: flake8 .
        
  #Checks the percentage of code is covered by unit tests.
  coverage:
    name: Check code coverage
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.12
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage
      - name: Run coverage
        run: |
          python -m coverage run manage.py test
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: htmlcov

  #Checks dependencies to identify vulnerabilities
  dependency-scan:
    name: Scan for vulnerabilities
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.12
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety
      - name: Run dependency scan
        run: safety check

  #Creates documentation
  #docs:
  #  name: Build documentation
  #  runs-on: ubuntu-latest
  #  steps:
  #    - name: Checkout
  #      uses: actions/checkout@v4
  #    - name: Set up Python
  #      uses: actions/setup-python@v3
  #      with:
  #        python-version: 3.12
  #    - name: Install documentation dependencies
  #      run: |
  #        python -m pip install --upgrade pip
  #        pip install -r docs/requirements.txt
  #    - name: Build documentation
  #      run: sphinx-build -b html docs/ build/docs

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.12
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: "${{ secrets.DOCKERHUB_USERNAME }}"
          password: "${{ secrets.DOCKERHUB_TOKEN }}"
      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub 1
        uses: docker/login-action@v2
        with:
          username: "${{ secrets.DOCKERHUB_USERNAME_1 }}"
          password: "${{ secrets.DOCKERHUB_TOKEN_1 }}"
      - name: Set up Docker buildx 1
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub 2
        uses: docker/login-action@v2
        with:
          username: "${{ secrets.DOCKERHUB_USERNAME_2 }}"
          password: "${{ secrets.DOCKERHUB_TOKEN_2 }}"
      - name: Set up Docker buildx 2
        uses: docker/setup-buildx-action@v2
  test-windows:
    name: Test Django Application
    runs-on: windows-latest
    needs: build-windows
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.12
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Pull Docker image
        run: docker pull "oni672/clockbox:latest"
      - name: Save Docker image details
        run: docker inspect "oni672/clockbox:latest" > docker-image-details.json
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: docker-image-details.json
      - name: Run Django tests
        run: |
          python manage.py test

  #Ensures that is up to code standards and style guidelines.
  lint-windows:
    name: Lint Python code
    runs-on: windows-latest
    needs: build-windows
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.12
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Run linter
        run: flake8 .
        
  #Checks the percentage of code is covered by unit tests.
  coverage-windows:
    name: Check code coverage
    runs-on: windows-latest
    needs: test-windows
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.12
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage
      - name: Run coverage
        run: |
          python -m coverage run manage.py test
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: htmlcov

  #Checks dependencies to identify vulnerabilities
  dependency-scan-windows:
    name: Scan for vulnerabilities
    runs-on: windows-latest
    needs: build-windows
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.12
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety
      - name: Run dependency scan
        run: safety check

  #Creates documentation
  #docs:
  #  name: Build documentation
  #  runs-on: windows-latest
  #  steps:
  #    - name: Checkout
  #      uses: actions/checkout@v4
  #    - name: Set up Python
  #      uses: actions/setup-python@v3
  #      with:
  #        python-version: 3.12
  #    - name: Install documentation dependencies
  #      run: |
  #        python -m pip install --upgrade pip
  #        pip install -r docs/requirements.txt
  #    - name: Build documentation
  #      run: sphinx-build -b html docs/ build/docs

  build-mac:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.12
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: "${{ secrets.DOCKERHUB_USERNAME }}"
          password: "${{ secrets.DOCKERHUB_TOKEN }}"
      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub 1
        uses: docker/login-action@v2
        with:
          username: "${{ secrets.DOCKERHUB_USERNAME_1 }}"
          password: "${{ secrets.DOCKERHUB_TOKEN_1 }}"
      - name: Set up Docker buildx 1
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub 2
        uses: docker/login-action@v2
        with:
          username: "${{ secrets.DOCKERHUB_USERNAME_2 }}"
          password: "${{ secrets.DOCKERHUB_TOKEN_2 }}"
      - name: Set up Docker buildx 2
        uses: docker/setup-buildx-action@v2
  test-mac:
    name: Test Django Application
    runs-on: macos-latest
    needs: build-mac
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.12
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Pull Docker image
        run: docker pull "oni672/clockbox:latest"
      - name: Save Docker image details
        run: docker inspect "oni672/clockbox:latest" > docker-image-details.json
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: docker-image-details.json
      - name: Run Django tests
        run: |
          python manage.py test

  #Ensures that is up to code standards and style guidelines.
  lint-mac:
    name: Lint Python code
    runs-on: macos-latest
    needs: build-mac
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.12
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Run linter
        run: flake8 .
        
  #Checks the percentage of code is covered by unit tests.
  coverage-mac:
    name: Check code coverage
    runs-on: macos-latest
    needs: test-mac
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.12
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage
      - name: Run coverage
        run: |
          python -m coverage run manage.py test
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: htmlcov

  #Checks dependencies to identify vulnerabilities
  dependency-scan-mac:
    name: Scan for vulnerabilities
    runs-on: macos-latest
    needs: build-mac
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.12
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety
      - name: Run dependency scan
        run: safety check

  #Creates documentation
  #docs:
  #  name: Build documentation
  #  runs-on: macos-latest
  #  steps:
  #    - name: Checkout
  #      uses: actions/checkout@v4
  #    - name: Set up Python
  #      uses: actions/setup-python@v3
  #      with:
  #        python-version: 3.12
  #    - name: Install documentation dependencies
  #      run: |
  #        python -m pip install --upgrade pip
  #        pip install -r docs/requirements.txt
  #    - name: Build documentation
  #      run: sphinx-build -b html docs/ build/docs